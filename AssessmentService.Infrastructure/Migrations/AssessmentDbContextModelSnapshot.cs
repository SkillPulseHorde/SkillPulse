// <auto-generated />
using System;
using AssessmentService.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssessmentService.Infrastructure.Migrations
{
    [DbContext(typeof(AssessmentDbContext))]
    partial class AssessmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssessmentService.Domain.Entities.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EvaluateeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EvaluateeId", "StartAt", "EndsAt");

                    b.ToTable("Assessments", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Competence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Competences", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.CompetenceEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompetenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("CompetenceEvaluations", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Criterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId");

                    b.ToTable("Criteria", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.CriterionEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("CompetenceEvaluationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CriterionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceEvaluationId");

                    b.HasIndex("CriterionId");

                    b.ToTable("CriterionEvaluations", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvaluatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("Evaluations", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.UserEvaluator", b =>
                {
                    b.Property<Guid>("EvaluateeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvaluatorId")
                        .HasColumnType("uuid");

                    b.HasKey("EvaluateeId", "EvaluatorId");

                    b.HasIndex("EvaluateeId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("UserEvaluators", (string)null);
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.CompetenceEvaluation", b =>
                {
                    b.HasOne("AssessmentService.Domain.Entities.Competence", null)
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssessmentService.Domain.Entities.Evaluation", null)
                        .WithMany("CompetenceEvaluations")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Criterion", b =>
                {
                    b.HasOne("AssessmentService.Domain.Entities.Competence", null)
                        .WithMany("Criteria")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.CriterionEvaluation", b =>
                {
                    b.HasOne("AssessmentService.Domain.Entities.CompetenceEvaluation", null)
                        .WithMany("CriterionEvaluations")
                        .HasForeignKey("CompetenceEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentService.Domain.Entities.Criterion", null)
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("AssessmentService.Domain.Entities.Assessment", "Assessment")
                        .WithMany("Evaluations")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Competence", b =>
                {
                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.CompetenceEvaluation", b =>
                {
                    b.Navigation("CriterionEvaluations");
                });

            modelBuilder.Entity("AssessmentService.Domain.Entities.Evaluation", b =>
                {
                    b.Navigation("CompetenceEvaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
